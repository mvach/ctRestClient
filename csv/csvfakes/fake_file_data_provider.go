// Code generated by counterfeiter. DO NOT EDIT.
package csvfakes

import (
	"ctRestClient/csv"
	"encoding/json"
	"sync"
)

type FakeFileDataProvider struct {
	GetDataStub        func(string, json.RawMessage) (string, error)
	getDataMutex       sync.RWMutex
	getDataArgsForCall []struct {
		arg1 string
		arg2 json.RawMessage
	}
	getDataReturns struct {
		result1 string
		result2 error
	}
	getDataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileDataProvider) GetData(arg1 string, arg2 json.RawMessage) (string, error) {
	fake.getDataMutex.Lock()
	ret, specificReturn := fake.getDataReturnsOnCall[len(fake.getDataArgsForCall)]
	fake.getDataArgsForCall = append(fake.getDataArgsForCall, struct {
		arg1 string
		arg2 json.RawMessage
	}{arg1, arg2})
	stub := fake.GetDataStub
	fakeReturns := fake.getDataReturns
	fake.recordInvocation("GetData", []interface{}{arg1, arg2})
	fake.getDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileDataProvider) GetDataCallCount() int {
	fake.getDataMutex.RLock()
	defer fake.getDataMutex.RUnlock()
	return len(fake.getDataArgsForCall)
}

func (fake *FakeFileDataProvider) GetDataCalls(stub func(string, json.RawMessage) (string, error)) {
	fake.getDataMutex.Lock()
	defer fake.getDataMutex.Unlock()
	fake.GetDataStub = stub
}

func (fake *FakeFileDataProvider) GetDataArgsForCall(i int) (string, json.RawMessage) {
	fake.getDataMutex.RLock()
	defer fake.getDataMutex.RUnlock()
	argsForCall := fake.getDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileDataProvider) GetDataReturns(result1 string, result2 error) {
	fake.getDataMutex.Lock()
	defer fake.getDataMutex.Unlock()
	fake.GetDataStub = nil
	fake.getDataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileDataProvider) GetDataReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDataMutex.Lock()
	defer fake.getDataMutex.Unlock()
	fake.GetDataStub = nil
	if fake.getDataReturnsOnCall == nil {
		fake.getDataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeFileDataProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDataMutex.RLock()
	defer fake.getDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileDataProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ csv.FileDataProvider = new(FakeFileDataProvider)

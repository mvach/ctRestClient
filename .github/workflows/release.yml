# This workflow will build a golang project and create releases
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install system dependencies (keepassxc + clamav)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends keepassxc clamav

      - name: Run unit tests
        run: go test ./...

      - name: Run build
        run: scripts/build_binaries

      - name: Virus scan
        run: |
          scannerVersion=$(clamscan --version)
          echo "Using scanner version: $scannerVersion"

          echo "Scanning built binary with ClamAV..."
          clamscan --recursive --infected --verbose dist/ || SCAN_STATUS=$?
          if [ "${SCAN_STATUS:-0}" -eq 1 ]; then
            echo "❌ Virus detected in build artifacts. Build failed." >&2
            exit 1
          elif [ "${SCAN_STATUS:-0}" -gt 1 ]; then
            echo "❌ ClamAV scan error (exit code $SCAN_STATUS). Build failed." >&2
            exit $SCAN_STATUS
          fi
          echo "✅ No viruses found."

      - name: Create GitHub Release & upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: dist/CHANGELOG.md
          files: |
            dist/ctRestClient_*.tar.gz
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docs:
    needs: build-and-upload
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install MkDocs and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mike
          
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          
      - name: Create versioned MkDocs config
        run: |
          bash .github/scripts/create-versioned-mkdocs-config.sh ${{ steps.version.outputs.VERSION }}
          
      - name: Configure Git for mike
        run: |
          git config user.name "${{ github.repository_owner }}"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          
      - name: Deploy versioned docs
        run: |
          # Deploy the new version to gh-pages branch
          mike deploy --push ${{ steps.version.outputs.VERSION }} --title "${{ steps.version.outputs.VERSION }}" --update-aliases
          # Set this release as the new default (latest stable)
          mike set-default --push ${{ steps.version.outputs.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"ctRestClient/app"
	"ctRestClient/rest"
	"encoding/json"
	"sync"
)

type FakeGroupExporter struct {
	ExportGroupMembersStub        func(string, rest.GroupsEndpoint, rest.PersonsEndpoint) ([]json.RawMessage, error)
	exportGroupMembersMutex       sync.RWMutex
	exportGroupMembersArgsForCall []struct {
		arg1 string
		arg2 rest.GroupsEndpoint
		arg3 rest.PersonsEndpoint
	}
	exportGroupMembersReturns struct {
		result1 []json.RawMessage
		result2 error
	}
	exportGroupMembersReturnsOnCall map[int]struct {
		result1 []json.RawMessage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGroupExporter) ExportGroupMembers(arg1 string, arg2 rest.GroupsEndpoint, arg3 rest.PersonsEndpoint) ([]json.RawMessage, error) {
	fake.exportGroupMembersMutex.Lock()
	ret, specificReturn := fake.exportGroupMembersReturnsOnCall[len(fake.exportGroupMembersArgsForCall)]
	fake.exportGroupMembersArgsForCall = append(fake.exportGroupMembersArgsForCall, struct {
		arg1 string
		arg2 rest.GroupsEndpoint
		arg3 rest.PersonsEndpoint
	}{arg1, arg2, arg3})
	stub := fake.ExportGroupMembersStub
	fakeReturns := fake.exportGroupMembersReturns
	fake.recordInvocation("ExportGroupMembers", []interface{}{arg1, arg2, arg3})
	fake.exportGroupMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupExporter) ExportGroupMembersCallCount() int {
	fake.exportGroupMembersMutex.RLock()
	defer fake.exportGroupMembersMutex.RUnlock()
	return len(fake.exportGroupMembersArgsForCall)
}

func (fake *FakeGroupExporter) ExportGroupMembersCalls(stub func(string, rest.GroupsEndpoint, rest.PersonsEndpoint) ([]json.RawMessage, error)) {
	fake.exportGroupMembersMutex.Lock()
	defer fake.exportGroupMembersMutex.Unlock()
	fake.ExportGroupMembersStub = stub
}

func (fake *FakeGroupExporter) ExportGroupMembersArgsForCall(i int) (string, rest.GroupsEndpoint, rest.PersonsEndpoint) {
	fake.exportGroupMembersMutex.RLock()
	defer fake.exportGroupMembersMutex.RUnlock()
	argsForCall := fake.exportGroupMembersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGroupExporter) ExportGroupMembersReturns(result1 []json.RawMessage, result2 error) {
	fake.exportGroupMembersMutex.Lock()
	defer fake.exportGroupMembersMutex.Unlock()
	fake.ExportGroupMembersStub = nil
	fake.exportGroupMembersReturns = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupExporter) ExportGroupMembersReturnsOnCall(i int, result1 []json.RawMessage, result2 error) {
	fake.exportGroupMembersMutex.Lock()
	defer fake.exportGroupMembersMutex.Unlock()
	fake.ExportGroupMembersStub = nil
	if fake.exportGroupMembersReturnsOnCall == nil {
		fake.exportGroupMembersReturnsOnCall = make(map[int]struct {
			result1 []json.RawMessage
			result2 error
		})
	}
	fake.exportGroupMembersReturnsOnCall[i] = struct {
		result1 []json.RawMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportGroupMembersMutex.RLock()
	defer fake.exportGroupMembersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGroupExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.GroupExporter = new(FakeGroupExporter)

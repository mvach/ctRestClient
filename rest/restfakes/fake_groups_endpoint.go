// Code generated by counterfeiter. DO NOT EDIT.
package restfakes

import (
	"ctRestClient/rest"
	"sync"
)

type FakeGroupsEndpoint struct {
	GetGroupStub        func(string) (rest.GroupsResponse, error)
	getGroupMutex       sync.RWMutex
	getGroupArgsForCall []struct {
		arg1 string
	}
	getGroupReturns struct {
		result1 rest.GroupsResponse
		result2 error
	}
	getGroupReturnsOnCall map[int]struct {
		result1 rest.GroupsResponse
		result2 error
	}
	GetGroupMembersStub        func(int) ([]rest.GroupsMembersResponse, error)
	getGroupMembersMutex       sync.RWMutex
	getGroupMembersArgsForCall []struct {
		arg1 int
	}
	getGroupMembersReturns struct {
		result1 []rest.GroupsMembersResponse
		result2 error
	}
	getGroupMembersReturnsOnCall map[int]struct {
		result1 []rest.GroupsMembersResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGroupsEndpoint) GetGroup(arg1 string) (rest.GroupsResponse, error) {
	fake.getGroupMutex.Lock()
	ret, specificReturn := fake.getGroupReturnsOnCall[len(fake.getGroupArgsForCall)]
	fake.getGroupArgsForCall = append(fake.getGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetGroupStub
	fakeReturns := fake.getGroupReturns
	fake.recordInvocation("GetGroup", []interface{}{arg1})
	fake.getGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupsEndpoint) GetGroupCallCount() int {
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	return len(fake.getGroupArgsForCall)
}

func (fake *FakeGroupsEndpoint) GetGroupCalls(stub func(string) (rest.GroupsResponse, error)) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = stub
}

func (fake *FakeGroupsEndpoint) GetGroupArgsForCall(i int) string {
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	argsForCall := fake.getGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGroupsEndpoint) GetGroupReturns(result1 rest.GroupsResponse, result2 error) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = nil
	fake.getGroupReturns = struct {
		result1 rest.GroupsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupsEndpoint) GetGroupReturnsOnCall(i int, result1 rest.GroupsResponse, result2 error) {
	fake.getGroupMutex.Lock()
	defer fake.getGroupMutex.Unlock()
	fake.GetGroupStub = nil
	if fake.getGroupReturnsOnCall == nil {
		fake.getGroupReturnsOnCall = make(map[int]struct {
			result1 rest.GroupsResponse
			result2 error
		})
	}
	fake.getGroupReturnsOnCall[i] = struct {
		result1 rest.GroupsResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupsEndpoint) GetGroupMembers(arg1 int) ([]rest.GroupsMembersResponse, error) {
	fake.getGroupMembersMutex.Lock()
	ret, specificReturn := fake.getGroupMembersReturnsOnCall[len(fake.getGroupMembersArgsForCall)]
	fake.getGroupMembersArgsForCall = append(fake.getGroupMembersArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.GetGroupMembersStub
	fakeReturns := fake.getGroupMembersReturns
	fake.recordInvocation("GetGroupMembers", []interface{}{arg1})
	fake.getGroupMembersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGroupsEndpoint) GetGroupMembersCallCount() int {
	fake.getGroupMembersMutex.RLock()
	defer fake.getGroupMembersMutex.RUnlock()
	return len(fake.getGroupMembersArgsForCall)
}

func (fake *FakeGroupsEndpoint) GetGroupMembersCalls(stub func(int) ([]rest.GroupsMembersResponse, error)) {
	fake.getGroupMembersMutex.Lock()
	defer fake.getGroupMembersMutex.Unlock()
	fake.GetGroupMembersStub = stub
}

func (fake *FakeGroupsEndpoint) GetGroupMembersArgsForCall(i int) int {
	fake.getGroupMembersMutex.RLock()
	defer fake.getGroupMembersMutex.RUnlock()
	argsForCall := fake.getGroupMembersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGroupsEndpoint) GetGroupMembersReturns(result1 []rest.GroupsMembersResponse, result2 error) {
	fake.getGroupMembersMutex.Lock()
	defer fake.getGroupMembersMutex.Unlock()
	fake.GetGroupMembersStub = nil
	fake.getGroupMembersReturns = struct {
		result1 []rest.GroupsMembersResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupsEndpoint) GetGroupMembersReturnsOnCall(i int, result1 []rest.GroupsMembersResponse, result2 error) {
	fake.getGroupMembersMutex.Lock()
	defer fake.getGroupMembersMutex.Unlock()
	fake.GetGroupMembersStub = nil
	if fake.getGroupMembersReturnsOnCall == nil {
		fake.getGroupMembersReturnsOnCall = make(map[int]struct {
			result1 []rest.GroupsMembersResponse
			result2 error
		})
	}
	fake.getGroupMembersReturnsOnCall[i] = struct {
		result1 []rest.GroupsMembersResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGroupsEndpoint) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGroupMutex.RLock()
	defer fake.getGroupMutex.RUnlock()
	fake.getGroupMembersMutex.RLock()
	defer fake.getGroupMembersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGroupsEndpoint) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rest.GroupsEndpoint = new(FakeGroupsEndpoint)
